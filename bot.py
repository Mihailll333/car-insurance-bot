import os
import openai
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv

load_dotenv()
TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")
openai.api_key = os.getenv("OPENAI_KEY")

user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ—Å—Ç—Ä–∞—Ö—É–≤–∞–Ω–Ω—è.\n" 
       "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞."
    )
    user_data[update.effective_user.id] = {"step": "passport"}

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    photo_file = await update.message.photo[-1].get_file()
    file_path = f"{uid}_{user_data[uid]['step']}.jpg"
    await photo_file.download_to_drive(file_path)

    step = user_data[uid]['step']
    if step == "passport":
        user_data[uid]["passport"] = file_path
        user_data[uid]["step"] = "car_doc"
        await update.message.reply_text("‚úÖ –ü–∞—Å–ø–æ—Ä—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ. –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞.")
    elif step == "car_doc":
        user_data[uid]["car_doc"] = file_path
        user_data[uid]["step"] = "confirm_data"
        # –ú–æ–∫–∞–µ–º Mindee
        extracted = {
            "–Ü–º'—è": "–í–æ–ª–æ–¥–∏–º–∏—Ä",
            "–ü—Ä—ñ–∑–≤–∏—â–µ": "–¢–∞—Ä–∞—Å–æ–≤",
            "–î–µ—Ä–∂–Ω–æ–º–µ—Ä": "AA1234BB",
            "VIN": "WVWZZZ1JZXW000000"
        }
        user_data[uid]["data"] = extracted
        summary = "\n".join(f"{k}: {v}" for k, v in extracted.items())
        await update.message.reply_text(f"üîç –Ø –æ—Ç—Ä–∏–º–∞–≤ —Ç–∞–∫—ñ –¥–∞–Ω—ñ:\n{summary}\n\n–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ? (—Ç–∞–∫/–Ω—ñ)")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    text = update.message.text.strip().lower()
    step = user_data.get(uid, {}).get("step")

    if step == "confirm_data":
        if text == "–¥–∞":
            user_data[uid]["step"] = "price"
            await update.message.reply_text("üíµ –í–∞—Ä—Ç—ñ—Å—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ - 100 USD. –í–∞—Å –≤–ª–∞—à—Ç–æ–≤—É—î? (—Ç–∞–∫/–Ω—ñ)")
        elif text == "–Ω–µ—Ç":
            user_data[uid]["step"] = "passport"
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∑–∞–Ω–æ–≤–æ.")
        else:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å '—Ç–∞–∫' –∞–±–æ '–Ω—ñ'.")
    elif step == "price":
        if text == "—Ç–∞–∫":
            user_data[uid]["step"] = "done"
            policy = await generate_dummy_policy(user_data[uid]["data"])
            await update.message.reply_text(f"üìÑ –û—Å—å –≤–∞—à–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞:\n\n{policy}")
        elif text == "–Ω—ñ":
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Ü—ñ–Ω–∞ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ ‚Äî 100 USD.")
        else:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å '—Ç–∞–∫' –∞–±–æ '–Ω—ñ'.")

async def generate_dummy_policy(data: dict) -> str:
    summary = "\n".join(f"{k}: {v}" for k, v in data.items())
    prompt = (
        f"–°—Ç–≤–æ—Ä–∏ —à–∞–±–ª–æ–Ω —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –ø–æ–ª—ñ—Å–∞ –Ω–∞ –ø—ñ–¥—Å—Ç–∞–≤—ñ —Ç–∞–∫–∏—Ö –¥–∞–Ω–∏—Ö:\n{summary}\n"
        "–ü–æ–ª—ñ—Å –º–∞—î –±—É—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–º, –∞–ª–µ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–º."
    )

    client = openai.AsyncOpenAI(api_key=os.getenv("OPENAI_KEY"))
    response = await client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
    )
    return response.choices[0].message.content.strip()

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π.")
    app.run_polling()

if __name__ == "__main__":
    main()
